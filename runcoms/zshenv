# -*- coding: utf-8 -*-
# vim: noai:et:tw=80:ts=2:ss=2:sts=2:sw=2:ft=zsh
#
# Defines environment variables.
#
# Authors:
#   Ricky Laney <rlaneyjr@gmail.com>
#
# ### zshenv
# 
# This file is sourced by all instances of Zsh, and thus, it should be kept as
# small as possible and should only define environment variables.
########################################
# The configuration files are read in the following order:
# 
#   01. /etc/zshenv
#   02. ~/.zshenv
#   03. /etc/zprofile
#   04. ~/.zprofile
#   05. /etc/zshrc
#   06. ~/.zshrc
#   07. ~/.zpreztorc
#   08. /etc/zlogin
#   09. ~/.zlogin
#   10. ~/.zlogout
#   11. /etc/zlogout
########################################
########## Profiler ###########
# Credit: https://kev.inburke.com/kevin/profiling-zsh-startup-time/

#PROFILE_STARTUP=true
if [[ "$PROFILE_STARTUP" == true ]]; then
    zmodload zsh/zprof # Output load-time statistics
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>"${XDG_CACHE_HOME:-$HOME/temp}/zsh_startup.$$"
    setopt xtrace prompt_subst
fi
############################################################
# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ ( "$SHLVL" -eq 1 && ! -o LOGIN ) && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprofile"
fi

########################################
#            Load First                #
########################################
# We get the OS type to use throughout
if [[ "$OSTYPE" == darwin* ]]; then
  export OS="mac"
  export HD="/Users/$USER"
elif [[ "$OSTYPE" == linux* ]]; then
  export OS="lin"
  export HD="/home/$USER"
fi
# Stuff that needs to be loaded first due to dependencies.
if [[ -n $SSH_CONNECTION ]]; then
  export TERM='xterm-256color'
else
  export TERM='xterm-256color-italic'
fi

if [[ $OS == "mac" ]]; then 
  export ZSH_CUSTOM=/Users/rlaney/.zsh
  export BROWSER='open'
elif [[ $OS == "lin" ]]; then 
  export ZSH_CUSTOM=/home/rlaney/.zsh
fi
# export TERM='tmux-256color'
# export TERM='screen-256color'

# Make vim the default editor.
export EDITOR='vim'
export VISUAL='vim'
export PAGER='less'

# Language
# Prefer US English and use UTF-8.
if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
fi
if [[ -z "$LC_ALL" ]]; then
  export LC_ALL='en_US.UTF-8'
fi
# Set architecture flags
if [[ -z "$ARCHFLAGS" ]]; then
  export ARCHFLAGS='-arch x86_64'
fi


############################################################
# node@8 is keg-only, which means it was not symlinked into /usr/local,
# because this is an alternate version of another formula.
# 
# If you need to have node@8 first in your PATH run:
#   echo 'export PATH="/usr/local/opt/node@8/bin:$PATH"' >> ~/.zshrc
# 
# For compilers to find node@8 you may need to set:
#   export LDFLAGS="-L/usr/local/opt/node@8/lib"
#   export CPPFLAGS="-I/usr/local/opt/node@8/include"
# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY="$HD/.node_history"
# Allow 32Â³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE="32768"
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE="sloppy"

############################################################
# Atom Environment Variables:
if [[ -d $HD/.atom ]]; then
  # The path from which Atom loads source code in dev mode.
  # Defaults to `~/github/atom`.
  export ATOM_DEV_RESOURCE_PATH="$HD/.atom/dev"
  # The root path for all configuration files and folders.
  # Defaults to `~/.atom`.
  export ATOM_HOME="$HD/.atom"
fi

############################################################
# User specified directories.  Can be overriden with local command.
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

############################################################
# The next line updates PATH for the Google Cloud SDK.
if [ -f '$HD/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc' ]; then
  source '$HD/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc'
fi

# The next line enables shell command completion for gcloud.
if [[ -f "$HD/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc" ]]; then 
  source "$HD/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc"
fi

############################################################
# Cheats customizations
#CHEATERS="$HD/cheaters/cheaters"
export CHEAT_EDITOR="vim"
export DEFAULT_CHEAT_DIR="$HD/.cheat/cheat/cheatsheets"
#export CHEATPATH="$CHEATERS/CheatenLife:$CHEATERS/CloudLife:$CHEATERS/FlyinLife
#                 :$CHEATERS/MayccollLife:$CHEATERS/PacketLife:$CHEATERS/PerlLife
#                 :$CHEATERS/PythonLife:$CHEATERS/VMwareLife"
export CHEATCOLORS=true
# Specifying a Syntax Highlighter
# You may manually specify which syntax highlighter to use for each cheatsheet by wrapping the sheet's contents in a Github-Flavored Markdown code-fence.
# Example:
#
# ```sql
# -- to select a user by ID
# SELECT *
# FROM Users
# WHERE id = 100
# ```
# If no syntax highlighter is specified, the bash highlighter will be used by default.

############################################################
# Ansible Environment
#export ANSIBLE_CONFIG=$HD/Projects/ansible.cfg
#export ANSIBLE_LIBRARY=$HD/Projects/ansible-cisco-snmp/library

############################################################
# Tastedive.com API Access Key
export TASTE_API_KEY="322428-NetEngOn-CPK7XUTD"

############################################################
# Pinboard.com API Access Key
export PINBOARD_TOKEN="rlaney:765D69E427A843DCC53F"
export PINBOARD_API_KEY="rlaney:765D69E427A843DCC53F"

############################################################
# If you need to have bzip2 first in your PATH run:
# export PATH="/usr/local/opt/bzip2/bin:$PATH"
#
# # For compilers to find bzip2 you may need to set:
# export LDFLAGS="-L/usr/local/opt/bzip2/lib"
# export CPPFLAGS="-I/usr/local/opt/bzip2/include"
#
# ############################################################
# # If you need to have zlib first in your PATH run:
# export PATH="/usr/local/opt/zlib /bin:$PATH"
#
# # For compilers to find zlib you may need to set:
# export LDFLAGS="-L/usr/local/opt/zlib/lib"
# export CPPFLAGS="-I/usr/local/opt/zlib/include"
#
# # For pkg-config to find zlib you may need to set:
# export PKG_CONFIG_PATH="/usr/local/opt/zlib/lib/pkgconfig"
#
# # For pyenv install command tell pyenv to use brew installed programs and MacOS10.14.sdk
# export PYTHON_CONFIGURE_OPTS='--enable-framework'
# export CPPFLAGS='-I/usr/local/opt/zlib/include'
# export CFLAGS='-O2 -I/usr/local/opt/openssl/include -I/usr/local/opt/readline/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include'
# export LDFLAGS='-L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib -L/usr/local/opt/readline/lib'
# export AR='/usr/bin/ar'
