# -*- coding: utf-8 -*-
# vim: noai:et:tw=80:ts=2:ss=2:sts=2:sw=2:ft=zsh
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Ricky Laney <rlaneyjr@gmail.com>
#
# ### zshrc
#
# This file is sourced by interactive shells. It should define aliases,
# functions, shell options, and key bindings.
########################################
# The configuration files are read in the following order:
#
#   01. /etc/zshenv
#   02. ~/.zshenv
#   03. /etc/zprofile
#   04. ~/.zprofile
#   05. /etc/zshrc
#   06. ~/.zshrc
#   07. ~/.zpreztorc
#   08. /etc/zlogin
#   09. ~/.zlogin
#   10. ~/.zlogout
#   11. /etc/zlogout
########################################

# Source Prezto.
# if [[ -s ${ZDOTDIR}/plugins/prezto/init.zsh ]]
# then
#   source ${ZDOTDIR}/plugins/prezto/init.zsh
# fi

# Source My Prezto.
if [[ -s ${ZSH_CUSTOM}/plugins/prezto/init.zsh ]]
then
  source ${ZSH_CUSTOM}/plugins/prezto/init.zsh
fi

# load custom executable functions
if [ -f ${HOME}/.myshutils ]
then
  . ${HOME}/.myshutils
fi
if [ -f ${HOME}/.myfuncts ]
then
  . ${HOME}/.myfuncts
fi

## load custom executable functions
#for function in ~/.zsh/functions/*; do
  #  source $function
  #done

## load custom executable functions
#for function in ${HOME}/.zsh/completion/*; do
  #  source $function
  #done

############################################################
# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING=UTF-8
typeset -Ug PYTHONPATH

[[ -d ${HOME}/lib ]] && export PYTHONPATH=${HOME}/lib:$PYTHONPATH
# Needed before installing Python versions with pyenv for YouCompleteMe
  #export PYTHON_CONFIGURE_OPTS=--enable-framework

if has_cmd virtualenv
then
  # Virtual Environment
  export WORKON_HOME=${HOME}/.virtualenvs
  export PROJECT_HOME=${HOME}/Projects
  #export VIRTUALENVWRAPPER_PYTHON="$PYENV_ROOT/shims/python"
  #source /usr/local/bin/virtualenvwrapper.sh
  export VIRTUAL_ENV_DISABLE_PROMPT=1
  # Directory to create environment for python3 -m venv
  #export ENV_DIR=${HOME}/.virtualenvs
fi

# if has_cmd virtualenvwrapper_lazy.sh
# then
#   source /usr/share/virtualenvwrapper/virtualenvwrapper_lazy.sh
# elif has_cmd virtualenvwrapper.sh
# then
#   source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
# fi

if has_cmd pyenv
then
  export PYENV_ROOT=${HOME}/.pyenv
  export PATH=${PYENV_ROOT}/bin:$PATH
  # Pyenv auto-activation
  export PYENV_SHELL=$(which zsh)
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  #export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV=true
  eval "$(pyenv init -)"
  #eval "$(pyenv virtualenv-init -)"
  pyenv virtualenvwrapper_lazy
  #if which pyenv virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
  #export PYENV_DEBUG=1
fi


# Powerline setup
#powerline-daemon -q
#POWERLINE_SHELL_CONTINUATION=1
#POWERLINE_SHELL_SELECT=1
#. /usr/local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh

##############################################
#		        Custom Config                #
##############################################
# Base16 Shell
#BASE16_SHELL="${HOME}/.config/colors/base16-shell/base16-default.dark.sh"
#[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
# Base16 Shell
#BASE16_SHELL="${HOME}/.config/colors/base16-shell/"
#[ -n "$PS1" ] && \
#    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
#        eval "$("$BASE16_SHELL/profile_helper.sh")"

# Set iterm hostname prior to script to speed-up.
ITERM2_HOSTNAME=${$(hostname)%%\.*}
test -e ${HOME}/.iterm2_shell_integration.zsh && source ${HOME}/.iterm2_shell_integration.zsh

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=${HOME}/Library/Caches/heroku/autocomplete/zsh_setup && \
  test -f $HEROKU_AC_ZSH_SETUP_PATH && \
  source $HEROKU_AC_ZSH_SETUP_PATH

# OPAM configuration
# Otherwise, every time you want to access your opam installation, you will need to run: eval "$(opam env)"
#. ${HOME}/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
test -r ${HOME}/.opam/opam-init/init.zsh && . ${HOME}/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# pandoc completion
if has_cmd pandoc
then
	eval "$(pandoc --bash-completion)"
fi

# pip zsh completion
if has_cmd pip
then
	eval "$(pip completion --zsh)" && compctl -K _pip_completion pip3
fi

# KubeCTL Completions for ZSH
if has_cmd kubectl
then
	source <(kubectl completion zsh)
fi
if has_cmd helm
then
	source <(helm completion zsh)
fi

# In zsh*, the following will load openshift cli zsh completion:
if has_cmd oc
then
  source <(oc completion zsh)
fi

# Init npx completion
if has_cmd npx
then
  source <(npx --shell-auto-fallback zsh)
fi

# Initialize jenv Java Manager
if has_cmd jenv
then
	eval "$(jenv init -)"
fi

if has_cmd brew && [[ $OS == "lin" ]]
then
  eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
fi

# Loaded with prezto-contrib
# Initialize direnv the environment variables manager
# if has_cmd direnv
# then
# 	eval "$(direnv hook zsh)"
# fi

# Pyenv auto-activation
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"
#if which pyenv virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# AWS-CLI completer
# if [ -f /usr/local/bin/aws_completer ]
# then
#     source /usr/local/bin/aws_completer
# fi
# if [ -f /usr/local/bin/aws_zsh_completer.sh]
# then
#     source /usr/local/bin/aws_zsh_completer.sh
# fi
# if [ -f /usr/local/bin/aws_completer.sh]
# then
#     source /usr/local/bin/aws_completer.sh
# fi

#Add the following to your ~/.bash_profile:
#if [ -f /usr/local/share/bash-completion/bash_completion ]
# then
#  . /usr/local/share/bash-completion/bash_completion
#fi

# Add tab completion for many Bash commands
# if which brew &> /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]
# then
# 	source "$(brew --prefix)/share/bash-completion/bash_completion"
# elif [ -f /etc/bash_completion ]
# then
# 	source /etc/bash_completion
# fi

# Homebrew completion
# if type brew &>/dev/null
# then
#   FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
# fi

# Brew command-not-found initialization Not needed with zprezto
#if brew command command-not-found-init > /dev/null 2>&1; then eval "$(brew command-not-found-init)"; fi

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]
then
	compctl -o default -o nospace -F _git g
fi

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e ${HOME}/.ssh/config ] && compctl -o "default" -o "nospace" -W "$(grep "^Host" ${HOME}/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh

# Make zsh know about hosts already accessed by SSH
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,${HOME}/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
if [[ $OS == 'mac' ]]
then
  compctl -W "NSGlobalDomain" defaults
  # Add `killall` tab completion for common apps
  compctl -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal iTerm2" killall
fi

# Increase Bash history size. Allow 32Â³ entries; the default is 500.
export HISTSIZE='1000'
export HISTFILESIZE=$HISTSIZE
# Omit duplicates and commands that begin with a space from history.
export HISTCONTROL='ignoreboth'
HISTFILE=${HOME}/.zsh_history
DIRSTACKSIZE=5

setopt complete_aliases
setopt no_bg_nice
setopt no_hup
setopt no_list_beep
setopt local_options
setopt local_traps
#setopt ignore_eof

# vi mode
setopt vi

# awesome cd movements from zshkit
setopt autocd autopushd pushdminus pushdsilent pushdtohome cdablevars
# Alias directories by assigning them to a variable
#setopt auto_name_dirs
# This allows us to omit the $ when cding into the directory variable
#setopt cdable_varS

# ===== Basics
# don't beep on error
setopt no_beep
# Allow comments even in interactive shells (especially for Muness)
setopt interactive_comments

# ===== Changing Directories
# If you type foo, and it isn't a command, and it is a directory in your cdpath, go there
setopt auto_cd
# if argument to cd is the name of a parameter whose value is a valid directory, it will become the current directory
setopt cdablevarS
# don't push multiple copies of the same directory onto the directory stack
setopt pushd_ignore_dups

# ===== Expansion and Globbing
# treat #, ~, and ^ as part of patterns for filename generation
setopt extended_glob
# Allow [ or ] wherever you want
unsetopt nomatch

# ===== History
# Allow multiple terminal sessions to all append to one zsh command history
setopt append_history
# save timestamp of command and duration
setopt extended_history
# Add comamnds as they are typed, don't wait until shell exit
setopt inc_append_history
# when trimming history, lose oldest duplicates first
setopt hist_expire_dups_first
# Do not write events to history that are duplicates of previous events
setopt hist_ignore_dups
setopt hist_ignore_all_dups
# remove command line from history list when first character on the line is a space
setopt hist_ignore_space
# When searching history don't display results already cycled through twice
setopt hist_find_no_dups
# Remove extra blanks from each command line being added to history
setopt hist_reduce_blanks
# don't execute, just expand history
setopt hist_verify
# imports new commands and appends typed commands to history
setopt share_history

# ===== Completion
# When completing from the middle of a word, move the cursor to the end of the word
setopt always_to_end
# show completion menu on successive tab press. needs unsetop menu_complete to work
setopt auto_menu
# any parameter that is set to the absolute name of a directory immediately becomes a name for that directory
setopt auto_name_dirs
# Allow completion from within a word/phrase
setopt complete_in_word

# do not autoselect the first completion entry
unsetopt menu_complete

# ===== Correction
# spelling correction for arguments
unsetopt correct_all
# spelling correction for commands
setopt correct

# ===== Prompt
# Enable parameter expansion, command substitution, and arithmetic expansion in the prompt
#setopt prompt_subst # Make sure prompt is able to be generated properly.
# only show the rprompt on the current prompt
#setopt transient_rprompt

# ===== Scripts and Functions
# perform implicit tees or cats when multiple redirections are attempted
setopt multios

## why would you type 'cd dir' if you could just type 'dir'?
#setopt AUTO_CD
## This makes cd=pushd
#setopt AUTO_PUSHD
## This will use named dirs when possible
#setopt AUTO_NAME_DIRS
## If we have a glob this will expand it
#setopt GLOB_COMPLETE
#setopt PUSHD_MINUS
## No more annoying pushd messages...
## setopt PUSHD_SILENT
## blank pushd goes to home
#setopt PUSHD_TO_HOME
## this will ignore multiple directories for the stack.  Useful?  I dunno.
#setopt PUSHD_IGNORE_DUPS
#
## 10 second wait if you do something that will delete everything.  I wish I'd had this before...
#setopt RM_STAR_WAIT
## use magic (this is default, but it can't hurt!)
#setopt ZLE
#setopt NO_HUP
#setopt IGNORE_EOF
## If I could disable Ctrl-s completely I would!
#setopt NO_FLOW_CONTROL
## Keep echo "station" > station from clobbering station
#setopt NO_CLOBBER
## Case insensitive globbing
#setopt NO_CASE_GLOB
## Be Reasonable!
#setopt NUMERIC_GLOB_SORT
## I don't know why I never set this before.
#setopt EXTENDED_GLOB
## hows about arrays be awesome?  (that is, frew${cool}frew has frew surrounding all the variables, not just first and last
#setopt RC_EXPAND_PARAM
## Now we can pipe to multiple outputs!
#setopt MULTIOS

# vi mode
bindkey -v
bindkey "^F" vi-cmd-mode
bindkey -M vicmd v edit-command-line

# handy keybindings
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
# Who doesn't want home and end to work?
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line
bindkey "^R" history-incremental-search-backward
bindkey "^P" history-search-backward
bindkey "^X" kill-line
bindkey "^Y" accept-and-hold
bindkey "^N" insert-last-word
bindkey -s "^T" "^[Isudo ^[A" # "t" for "toughguy"

globalias() {
   zle _expand_alias
   zle expand-word
   #zle self-insert
}
zle -N globalias
# control-space expands all aliases, including global
bindkey -M emacs "^ " globalias
bindkey -M viins "^ " globalias
# space to make a normal space
bindkey -M emacs " " magic-space
bindkey -M viins " " magic-space
# normal space during searches
bindkey -M isearch " " magic-space
# Incremental search is elite!
bindkey -M vicmd "/" history-incremental-search-backward
bindkey -M vicmd "?" history-incremental-search-forward
# Search based on what you typed in already
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward
bindkey "\eOP" run-help
# oh wow!  This is killer...  try it!
bindkey -M vicmd "q" push-line

# Fun tetris!
autoload -U tetris
zle -N tetris
bindkey "^Q" tetris

# NOT WORKING!!
#/usr/local/etc/bash_completion.d/doctl:type:4555: bad option: -t
#WARNING: this script is deprecated, please see git-completion.zsh
#/usr/local/etc/bash_completion.d/helm:type:1671: bad option: -t
#/usr/local/etc/bash_completion.d/kubectl:type:7716: bad option: -t
#/usr/local/etc/bash_completion.d/oc:type:18213: bad option: -t
#/usr/local/etc/bash_completion.d/openshift:type:785: bad option: -t
# Adding extra completions manually
#for f in $(ls -1 /usr/local/etc/bash_completion.d); do
#    source /usr/local/etc/bash_completion.d/$f
#done

# aliases
[[ -f ${HOME}/.aliases ]] && source ${HOME}/.aliases

# New Fuzzy Finder from command line
[ -f ${HOME}/.fzf.zsh ] && source ${HOME}/.fzf.zsh
# New Fuzzy Finder with my custom config
[ -f ${HOME}/.fzf.local ] && source ${HOME}/.fzf.local

# Load my private stuff
[[ -f ${HOME}/.ssh/.private ]] && source ${HOME}/.ssh/.private

# (eval):setopt:3: no such option: NO_warnnestedvar
# fix: (eval):setopt:3: no such option: NO_warnnestedvar
#_comp_options="${_comp_options/NO_warnnestedvar/}"

# Powerline shell prompt
# function powerline_precmd() {
#     PS1="$(powerline-shell --shell zsh $?)"
# }
#
# function install_powerline_precmd() {
#   for s in "${precmd_functions[@]}"; do
#     if [ "$s" = "powerline_precmd" ]
# then
#       return
#     fi
#   done
#   precmd_functions+=(powerline_precmd)
# }
#
# if [ "$TERM" != "linux" ]
# then
#     install_powerline_precmd
# fi

# Setup pyenv custom prompt "zsh-python-prompt"
source ${ZSH_CUSTOM}/plugins/zsh-python-prompt/zshrc.zsh
RPROMPT+='$ZSH_PYTHON_PROMPT'
setopt prompt_subst
#zstyle ':zsh-python-prompt:pyenv:' expire_sec 30
#zstyle ':zsh-python-prompt:pyenv:' symbol 'â'
zstyle ':zsh-python-prompt:pyenv:' symbol 'ð'

# Plugin to read Vim help files
source ${ZSH_CUSTOM}/plugins/vimman/vimman.zsh
zstyle ':completion:*' use-cache yes
zstyle ':vimman:' dir ${HOME}/.vim/plugged
zstyle ':vimman:' verbose yes
zstyle ':vimman:' expire 7
# Note that if you change the zstyle settings, you should delete the cache file and restart zsh.
# $ rm ~/.zcompcache/vimman
# $ exec zsh

############################################################
#source /usr/local/etc/bash_completion.d/*
############################################################
## Start rbenv
#export PATH=${HOME}/.rbenv/bin:$PATH
#eval $(rbenv init -)

# Add rbenv to PATH for scripting.
if [[ -d ${HOME}/.rbenv/bin ]]
then
  export PATH=$PATH:${HOME}/.rbenv/bin
  eval "$(rbenv init -)"
fi

# Add RVM to PATH for scripting
if [[ -f ${HOME}/.rvmrc ]]
then
  source ${HOME}/.rvmrc
fi

# Load RVM into a shell session *as a function*
# RVM home scripts completion
[[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
if [[ -d ${HOME}/.rvm/bin ]]
then
  export PATH=$PATH:${HOME}/.rvm/bin
fi

## The next line updates PATH for the Google Cloud SDK.
#if [ -f '/Users/rlaney/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/rlaney/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc'; fi
#
## The next line enables shell command completion for gcloud.
#if [ -f '/Users/rlaney/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/rlaney/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc'; fi

# Enable bashcompinit for pipx completions
if has_cmd pipx
then
  autoload -U bashcompinit
  bashcompinit
  eval "$(register-python-argcomplete pipx)"
fi

# setup thefuck
if has_cmd thefuck
then
  eval "$(thefuck --alias)"
  # eval "$(thefuck --alias --enable-experimental-instant-mode)"
fi

########### Profiler ###########
if [[ $PROFILE_STARTUP == true ]]
then
  zprof
  unsetopt xtrace
  exec 2>&3 3>&-
fi


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
